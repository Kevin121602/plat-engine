# bytereplacement specifies the overlay, offset, and bytes you want to write there:
#
#   0012 0801F738 60 B4 C0 46
#
# opens up overlay 12, jumps to the file offset 0x1F738, and writes 60 B4 C0 46 there
#
#   arm9 020CA054 60 00 2D E9
#
# opens up the arm9, jumps to the offset that would be in memory at 020CA054, and writes 60 00 2D E9 there

# Critical hit table pointer
# This updates the rates for critical hits as they are in generation 8
# +0: 0x18 (= 24 -> 1 / 24 chance)
# +1: 0x08 (=  8 -> 1 / 8 chance)
# +2: 0x02 (=  2 -> 1 / 2 chance)
# +3: 0x01 (=  1 -> guaranteed)
# +4: 0x01 (=  1 -> guaranteed)
#
# Other options:
# Generation    6: 10 08 02 01 01
# Generations 3-5: 10 08 04 03 02
# 0016 0226EBA0 18 08 02 01 01

# Paralysis speed adjustment
# This updates the speed penalty for a Pokemon which is paralyzed
# from 1/4 to 1/2.
#
# First instance
# 0016 0225310A 76 08
# Second instance
# 0016 022532B6 64 08

# Critical multiplier refactoring
# Replace 1 with 0 because Gen4's method is bad
#
# This one is the value used by the catching demo and the first
# battle against Barry after getting your starter
0016 02241CFC 00 21

# Another 1 to replace with a 0 here in the multi-hit code
0016 02255F9C 00 23

# Get rid of a bunch of stuff in the damage calc script command
# that's now handled by calc.c
#
# This just circumvents all that with an early return FALSE;
0016 022414F6 00 20 38 BD

# Also get rid of an extra call to the type checker that's instigated
# by the server sequence. This call would otherwise apply STAB and
# type-effectiveness a second time.
#
#   ldr     r0, [sp, #8]
#   mov     r8, r8
0016 0224E748 02 98 C0 46